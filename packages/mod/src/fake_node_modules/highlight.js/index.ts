import { getProxyByKeys } from "@webpack";
import { proxyCache } from "../../util";

const hljs = getProxyByKeys<typeof import("highlight.js")["default"]>([ "highlightAll" ]);

// For the most this works
// copy(Object.entries(VX.webpack.getModule(m => m.highlightAll)).map(([ k, v ]) => {
//   return [ k, (v instanceof Object || (typeof v === "object" && v !== null)) ? v instanceof RegExp ? `/${v.source}/${v.flags}` : `proxyCache(() => hljs[${JSON.stringify(k)}], ${typeof v === "object"})` : typeof v === "string" ? JSON.stringify(v) : v ]
// }).map(([ a, b ]) => `export const ${a} = ${b}`).join(";\n"))

export const highlight = proxyCache(() => hljs["highlight"], false);
export const highlightAuto = proxyCache(() => hljs["highlightAuto"], false);
export const highlightAll = proxyCache(() => hljs["highlightAll"], false);
export const highlightElement = proxyCache(() => hljs["highlightElement"], false);
export const highlightBlock = proxyCache(() => hljs["highlightBlock"], false);
export const configure = proxyCache(() => hljs["configure"], false);
export const initHighlighting = proxyCache(() => hljs["initHighlighting"], false);
export const initHighlightingOnLoad = proxyCache(() => hljs["initHighlightingOnLoad"], false);
export const registerLanguage = proxyCache(() => hljs["registerLanguage"], false);
export const unregisterLanguage = proxyCache(() => hljs["unregisterLanguage"], false);
export const listLanguages = proxyCache(() => hljs["listLanguages"], false);
export const getLanguage = proxyCache(() => hljs["getLanguage"], false);
export const registerAliases = proxyCache(() => hljs["registerAliases"], false);
export const autoDetection = proxyCache(() => hljs["autoDetection"], false);
export const inherit = proxyCache(() => hljs["inherit"], false);
export const addPlugin = proxyCache(() => hljs["addPlugin"], false);
export const debugMode = proxyCache(() => hljs["debugMode"], false);
export const safeMode = proxyCache(() => hljs["safeMode"], false);
export const versionString = "11.7.0";
export const regex = proxyCache(() => hljs["regex"], true);
export const MATCH_NOTHING_RE = /\b\B/;
export const IDENT_RE = "[a-zA-Z]\\w*";
export const UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
export const NUMBER_RE = "\\b\\d+(\\.\\d+)?";
export const C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
export const BINARY_NUMBER_RE = "\\b(0b[01]+)";
export const RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
export const SHEBANG = proxyCache(() => hljs["SHEBANG"], false);
export const BACKSLASH_ESCAPE = proxyCache(() => hljs["BACKSLASH_ESCAPE"], true);
export const APOS_STRING_MODE = proxyCache(() => hljs["APOS_STRING_MODE"], true);
export const QUOTE_STRING_MODE = proxyCache(() => hljs["QUOTE_STRING_MODE"], true);
export const PHRASAL_WORDS_MODE = proxyCache(() => hljs["PHRASAL_WORDS_MODE"], true);
export const COMMENT = proxyCache(() => hljs["COMMENT"], false);
export const C_LINE_COMMENT_MODE = proxyCache(() => hljs["C_LINE_COMMENT_MODE"], true);
export const C_BLOCK_COMMENT_MODE = proxyCache(() => hljs["C_BLOCK_COMMENT_MODE"], true);
export const HASH_COMMENT_MODE = proxyCache(() => hljs["HASH_COMMENT_MODE"], true);
export const NUMBER_MODE = proxyCache(() => hljs["NUMBER_MODE"], true);
export const C_NUMBER_MODE = proxyCache(() => hljs["C_NUMBER_MODE"], true);
export const BINARY_NUMBER_MODE = proxyCache(() => hljs["BINARY_NUMBER_MODE"], true);
export const REGEXP_MODE = proxyCache(() => hljs["REGEXP_MODE"], true);
export const TITLE_MODE = proxyCache(() => hljs["TITLE_MODE"], true);
export const UNDERSCORE_TITLE_MODE = proxyCache(() => hljs["UNDERSCORE_TITLE_MODE"], true);
export const METHOD_GUARD = proxyCache(() => hljs["METHOD_GUARD"], true);
export const END_SAME_AS_BEGIN = proxyCache(() => hljs["END_SAME_AS_BEGIN"], false);
export default hljs;