import { getLazyByKeys } from "@webpack";
import { proxyCache } from "../../util";
import type { RootOptions, HydrationOptions, Root } from "react-dom/client";

type ReactDOMType = typeof import("react-dom");
type ReactDOMClientType = typeof import("react-dom/client");

let $ReactDOM: ReactDOMType & ReactDOMClientType;

export function createRoot(container: Element | DocumentFragment, options?: RootOptions | undefined): Root {
  return proxyCache(() => $ReactDOM.createRoot(container, options));
}
export function hydrateRoot(container: Element | Document, initialChildren: React.ReactNode, options?: HydrationOptions | undefined): Root {
  return proxyCache(() => $ReactDOM.hydrateRoot(container, initialChildren, options));
}
export function createPortal(children: React.ReactNode, container: Element | DocumentFragment, key?: string | null | undefined): React.ReactPortal {
  return proxyCache(() => $ReactDOM.createPortal(children, container, key));
}
export function findDOMNode(instance: React.ReactInstance | null | undefined): Element | Text | null {
  return $ReactDOM.findDOMNode(instance);
}
export function flushSync(fn: Function): any {
  return $ReactDOM.flushSync(fn as any);
}
// @ts-expect-error
export let hydrate: import("react-dom").Renderer = function(...args) {
  // @ts-expect-error
  return $ReactDOM.hydrate.apply(null, args);
}
// @ts-expect-error
export let render: import("react-dom").Renderer = function(...args) {
  // @ts-expect-error
  return $ReactDOM.render.apply(null, args);
}
export function unmountComponentAtNode(container: Element | DocumentFragment): boolean {
  return $ReactDOM.unmountComponentAtNode(container);
}

export let version = "1.0.0";

let ReactDOM: any = {
  createPortal,
  findDOMNode,
  flushSync,
  hydrate,
  render,
  unmountComponentAtNode,
  version,
  createRoot,
  hydrateRoot
}

getLazyByKeys<ReactDOMType & ReactDOMClientType>([ "render", "hydrate", "createPortal" ]).then((reactDOM) => {
  ReactDOM = reactDOM;
  $ReactDOM = reactDOM;

  version = reactDOM.version;
  render = reactDOM.render;
  hydrate = reactDOM.hydrate;
});


export default new Proxy(ReactDOM, {
  get(target, prop, receiver) {
    if (prop === Symbol.for("vx.react-dom")) return ReactDOM;
    return target[prop] = ReactDOM[prop];
  },
  ownKeys() {
    return Array.from(new Set([ ...Reflect.ownKeys(ReactDOM), "prototype" ]));
  }
});